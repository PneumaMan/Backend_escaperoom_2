// <auto-generated />
using System;
using Backend_Escaperoom_2.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendEscaperoom2.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Encuestas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_encuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<int>("EscapeRoomId")
                        .HasColumnType("int")
                        .HasColumnName("id_escape_room");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("NombreEncuesta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_encuesta");

                    b.HasKey("Id");

                    b.HasIndex("EscapeRoomId");

                    b.ToTable("Encuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.EncuestasParticipantes", b =>
                {
                    b.Property<int>("ParticipanteId")
                        .HasColumnType("int")
                        .HasColumnName("id_participante");

                    b.Property<int>("PreguntaEncuestasId")
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta_encuesta");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_respuesta");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("RespuestaAbierta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("respuesta_abierta");

                    b.Property<int?>("RespuestasEncuestaId")
                        .HasColumnType("int");

                    b.Property<int?>("RespuestasEncuestasId")
                        .HasColumnType("int")
                        .HasColumnName("id_respuesta_encuesta");

                    b.HasKey("ParticipanteId", "PreguntaEncuestasId");

                    b.HasIndex("PreguntaEncuestasId");

                    b.HasIndex("RespuestasEncuestaId");

                    b.HasIndex("ParticipanteId", "PreguntaEncuestasId")
                        .IsUnique();

                    b.ToTable("Encuestas_Participantes");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_escape_room");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CelularOrganizador")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("celular_organizador");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaFinJuego")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_fin_juego");

                    b.Property<DateTime>("FechaInicioJuego")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_inicio_juego");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("NombreEscapeRoom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_escape_room");

                    b.Property<string>("Organizador")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("organizador");

                    b.Property<TimeSpan>("TiempoLimiteGeneral")
                        .HasColumnType("time")
                        .HasColumnName("tiempo_limite_general");

                    b.Property<TimeSpan>("TiempoLimiteParticipantes")
                        .HasColumnType("time")
                        .HasColumnName("tiempo_limite_participantes");

                    b.Property<int>("TipoEscape")
                        .HasColumnType("int")
                        .HasColumnName("tipo_escape");

                    b.HasKey("Id");

                    b.ToTable("Escape_Room");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Estacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContextoEstacion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contexto_estacion");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<int>("EscapeRoomId")
                        .HasColumnType("int")
                        .HasColumnName("id_escape_room");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("NombreEscapeRoom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_estacion");

                    b.Property<string>("PathMultimedia")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("path_multimedia");

                    b.Property<string>("QRBgColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("qr_bg_color");

                    b.Property<string>("QRColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("qr_color");

                    b.Property<int>("TipoMultimedia")
                        .HasColumnType("int")
                        .HasColumnName("tipo_multimedia");

                    b.HasKey("Id");

                    b.HasIndex("EscapeRoomId");

                    b.ToTable("Estacion");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Participante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_participante");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("apellidos");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<int>("EscapeRoomId")
                        .HasColumnType("int")
                        .HasColumnName("id_escape_room");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("identificacion");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombres");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("id_team");

                    b.Property<long?>("Telefono")
                        .HasColumnType("bigint")
                        .HasColumnName("telefono");

                    b.Property<TimeSpan?>("TimeScore")
                        .HasColumnType("time")
                        .HasColumnName("time_score");

                    b.Property<int>("TipoIdentificacion")
                        .HasColumnType("int")
                        .HasColumnName("tipo_identificacion");

                    b.Property<int>("TipoParticipanteId")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_participante");

                    b.HasKey("Id");

                    b.HasIndex("EscapeRoomId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TipoParticipanteId");

                    b.ToTable("Participantes");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.ParticipantesRespuestas", b =>
                {
                    b.Property<int>("ParticipanteId")
                        .HasColumnType("int")
                        .HasColumnName("id_participante");

                    b.Property<int>("RetoId")
                        .HasColumnType("int")
                        .HasColumnName("id_reto");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_respuesta");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("RespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("id_respuesta");

                    b.Property<TimeSpan>("TiempoRespuesta")
                        .HasColumnType("time")
                        .HasColumnName("tiempo_respuesta");

                    b.HasKey("ParticipanteId", "RetoId");

                    b.HasIndex("RespuestaId");

                    b.HasIndex("RetoId");

                    b.HasIndex("ParticipanteId", "RetoId", "RespuestaId")
                        .IsUnique();

                    b.ToTable("Participantes_Respuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.PreguntaEncuestas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta_encuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<int>("EncuestasId")
                        .HasColumnType("int")
                        .HasColumnName("id_encuesta");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("NumeroOrden")
                        .HasColumnType("int")
                        .HasColumnName("numero_orden");

                    b.Property<string>("PathMultimedia")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("path_multimedia");

                    b.Property<string>("PreguntaEncuesta")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("pregunta_encuesta");

                    b.Property<int>("TipoMultimedia")
                        .HasColumnType("int")
                        .HasColumnName("tipo_multimedia");

                    b.Property<int>("TipoPregunta")
                        .HasColumnType("int")
                        .HasColumnName("tipo_pregunta");

                    b.HasKey("Id");

                    b.HasIndex("EncuestasId");

                    b.ToTable("Preguntas_Encuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.RespuestaEncuestas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_respuesta_encuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("PreguntaEncuestasId")
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta_encuesta");

                    b.Property<string>("Respuesta")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("respuesta");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaEncuestasId");

                    b.ToTable("Respuestas_Encuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.RespuestaRetos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_respuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Correcta")
                        .HasColumnType("bit")
                        .HasColumnName("correcta");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Llave")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("llave");

                    b.Property<int?>("NextEstacionId")
                        .HasColumnType("int")
                        .HasColumnName("id_next_estacion");

                    b.Property<string>("PalabraRetoRetorno")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("palabra_reto_retorno");

                    b.Property<int?>("PosicionLlave")
                        .HasColumnType("int")
                        .HasColumnName("posicion_llave");

                    b.Property<string>("RespuestaReto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("respuesta_reto");

                    b.Property<int>("RetoId")
                        .HasColumnType("int")
                        .HasColumnName("id_reto");

                    b.HasKey("Id");

                    b.HasIndex("NextEstacionId")
                        .IsUnique()
                        .HasFilter("[id_next_estacion] IS NOT NULL");

                    b.HasIndex("RetoId");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Reto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("Bonificacion")
                        .HasColumnType("time")
                        .HasColumnName("bonificacion");

                    b.Property<string>("ContextoReto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contexto_reto");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<int>("EstacionId")
                        .HasColumnType("int")
                        .HasColumnName("id_estacion");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("NombreReto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_reto");

                    b.Property<int>("NumeroOportunidades")
                        .HasColumnType("int")
                        .HasColumnName("numero_oportunidades");

                    b.Property<int>("NumeroReto")
                        .HasColumnType("int")
                        .HasColumnName("numero_reto");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit")
                        .HasColumnName("obligatorio");

                    b.Property<string>("PathMultimedia")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("path_multimedia");

                    b.Property<string>("PreguntaReto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("pregunta_reto");

                    b.Property<string>("QRBgColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("qr_bg_color");

                    b.Property<string>("QRColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("qr_color");

                    b.Property<int?>("RetoPadreId")
                        .HasColumnType("int")
                        .HasColumnName("id_reto_padre");

                    b.Property<int>("TipoMultimedia")
                        .HasColumnType("int")
                        .HasColumnName("tipo_multimedia");

                    b.Property<int>("TipoParticipanteId")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_participante");

                    b.Property<int>("TipoPregunta")
                        .HasColumnType("int")
                        .HasColumnName("tipo_pregunta");

                    b.Property<int>("TipoReto")
                        .HasColumnType("int")
                        .HasColumnName("tipo_reto");

                    b.HasKey("Id");

                    b.HasIndex("EstacionId");

                    b.HasIndex("RetoPadreId")
                        .IsUnique()
                        .HasFilter("[id_reto_padre] IS NOT NULL");

                    b.HasIndex("TipoParticipanteId");

                    b.ToTable("Retos");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_team");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<int>("EscapeRoomId")
                        .HasColumnType("int")
                        .HasColumnName("id_escape_room");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("capacidad");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("NombreTeam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre_team");

                    b.Property<TimeSpan?>("TimeScoreTeam")
                        .HasColumnType("time")
                        .HasColumnName("time_score_grupal");

                    b.HasKey("Id");

                    b.HasIndex("EscapeRoomId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.TipoParticipante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_participante");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<int>("EscapeRoomId")
                        .HasColumnType("int")
                        .HasColumnName("id_escape_room");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_tipo");

                    b.HasKey("Id");

                    b.HasIndex("EscapeRoomId");

                    b.ToTable("Tipo_Participante");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ChangedPassword")
                        .HasColumnType("bit")
                        .HasColumnName("ChangedPassword");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EstadoUsuario")
                        .HasColumnType("bit")
                        .HasColumnName("EstadoUsuario");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastSignin");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime2")
                        .HasColumnName("Registered");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoLogueo")
                        .HasColumnType("int")
                        .HasColumnName("TipoLogueo");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.UsuarioRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Encuestas", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", "EscapeRoom")
                        .WithMany("Encuestas")
                        .HasForeignKey("EscapeRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscapeRoom");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.EncuestasParticipantes", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Participante", "Participante")
                        .WithMany("EncuestasParticipantes")
                        .HasForeignKey("ParticipanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.PreguntaEncuestas", "PreguntaEncuesta")
                        .WithMany("EncuestasParticipantes")
                        .HasForeignKey("PreguntaEncuestasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.RespuestaEncuestas", "RespuestasEncuesta")
                        .WithMany("EncuestasParticipantes")
                        .HasForeignKey("RespuestasEncuestaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Participante");

                    b.Navigation("PreguntaEncuesta");

                    b.Navigation("RespuestasEncuesta");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Estacion", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", "EscapeRoom")
                        .WithMany("Estaciones")
                        .HasForeignKey("EscapeRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscapeRoom");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Participante", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", "EscapeRoom")
                        .WithMany("Participantes")
                        .HasForeignKey("EscapeRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Team", "MyTeam")
                        .WithMany("Participantes")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.TipoParticipante", "TipoParticipante")
                        .WithMany("Participantes")
                        .HasForeignKey("TipoParticipanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscapeRoom");

                    b.Navigation("MyTeam");

                    b.Navigation("TipoParticipante");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.ParticipantesRespuestas", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Participante", "Participante")
                        .WithMany("ParticipantesRespuestas")
                        .HasForeignKey("ParticipanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.RespuestaRetos", "Respuesta")
                        .WithMany("ParticipantesRespuestas")
                        .HasForeignKey("RespuestaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Reto", "Reto")
                        .WithMany("ParticipantesRespuestas")
                        .HasForeignKey("RetoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Participante");

                    b.Navigation("Respuesta");

                    b.Navigation("Reto");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.PreguntaEncuestas", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Encuestas", "Encuesta")
                        .WithMany("PreguntasEncuestas")
                        .HasForeignKey("EncuestasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.RespuestaEncuestas", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.PreguntaEncuestas", "PreguntaEncuestas")
                        .WithMany("RespuestasEncuestas")
                        .HasForeignKey("PreguntaEncuestasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PreguntaEncuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.RespuestaRetos", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Estacion", "NextEstacion")
                        .WithOne()
                        .HasForeignKey("Backend_Escaperoom_2.Domain.Entities.RespuestaRetos", "NextEstacionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Reto", "Reto")
                        .WithMany("Respuestas")
                        .HasForeignKey("RetoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NextEstacion");

                    b.Navigation("Reto");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Reto", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Estacion", "Estacion")
                        .WithMany("Retos")
                        .HasForeignKey("EstacionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Reto", "RetoPadre")
                        .WithOne()
                        .HasForeignKey("Backend_Escaperoom_2.Domain.Entities.Reto", "RetoPadreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.TipoParticipante", "TipoParticipante")
                        .WithMany("Retos")
                        .HasForeignKey("TipoParticipanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estacion");

                    b.Navigation("RetoPadre");

                    b.Navigation("TipoParticipante");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Team", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", "EscapeRoom")
                        .WithMany("Equipos")
                        .HasForeignKey("EscapeRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscapeRoom");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.TipoParticipante", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", "EscapeRoom")
                        .WithMany("TipoParticipantes")
                        .HasForeignKey("EscapeRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscapeRoom");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.UsuarioRole", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Role", "Role")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Backend_Escaperoom_2.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Encuestas", b =>
                {
                    b.Navigation("PreguntasEncuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.EscapeRoom", b =>
                {
                    b.Navigation("Encuestas");

                    b.Navigation("Equipos");

                    b.Navigation("Estaciones");

                    b.Navigation("Participantes");

                    b.Navigation("TipoParticipantes");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Estacion", b =>
                {
                    b.Navigation("Retos");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Participante", b =>
                {
                    b.Navigation("EncuestasParticipantes");

                    b.Navigation("ParticipantesRespuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.PreguntaEncuestas", b =>
                {
                    b.Navigation("EncuestasParticipantes");

                    b.Navigation("RespuestasEncuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.RespuestaEncuestas", b =>
                {
                    b.Navigation("EncuestasParticipantes");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.RespuestaRetos", b =>
                {
                    b.Navigation("ParticipantesRespuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Reto", b =>
                {
                    b.Navigation("ParticipantesRespuestas");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Role", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Team", b =>
                {
                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.TipoParticipante", b =>
                {
                    b.Navigation("Participantes");

                    b.Navigation("Retos");
                });

            modelBuilder.Entity("Backend_Escaperoom_2.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("UsuariosRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
